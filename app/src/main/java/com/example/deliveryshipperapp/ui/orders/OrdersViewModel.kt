package com.example.deliveryshipperapp.ui.orders

import android.content.Context
import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.deliveryshipperapp.data.remote.dto.OrderDetailDto
import com.example.deliveryshipperapp.data.remote.dto.OrderDto
import com.example.deliveryshipperapp.data.remote.dto.OrdersListResponse
import com.example.deliveryshipperapp.data.remote.dto.UserDto
import com.example.deliveryshipperapp.domain.usecase.*
import com.example.deliveryshipperapp.utils.NotificationHelper
import com.example.deliveryshipperapp.utils.Resource
import dagger.hilt.android.lifecycle.HiltViewModel
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

private const val TAG = "OrdersViewModel"

@HiltViewModel
class OrdersViewModel @Inject constructor(
    private val getAvailableOrders: GetAvailableOrdersUseCase,   // cho processing
    private val getReceivedOrders: GetReceivedOrdersUseCase,     // cho shipping
    private val getOrderDetail: GetOrderDetailUseCase,
    private val receiveOrder: ReceiveOrderUseCase,
    private val updateOrder: UpdateOrderUseCase,
    @ApplicationContext private val context: Context
) : ViewModel() {

    private val _availableOrders = MutableStateFlow<Resource<OrdersListResponse>>(Resource.Loading())
    val availableOrders: StateFlow<Resource<OrdersListResponse>> = _availableOrders

    private val _myOrders = MutableStateFlow<Resource<OrdersListResponse>>(Resource.Loading())
    val myOrders: StateFlow<Resource<OrdersListResponse>> = _myOrders

    private val _orderDetail = MutableStateFlow<Resource<OrderDetailDto>>(Resource.Loading())
    val orderDetail: StateFlow<Resource<OrderDetailDto>> = _orderDetail

    private val _customerInfo = MutableStateFlow<Resource<UserDto>>(Resource.Loading())
    val customerInfo: StateFlow<Resource<UserDto>> = _customerInfo

    private val _receiveOrderState = MutableStateFlow<Resource<Unit>?>(null)
    val receiveOrderState: StateFlow<Resource<Unit>?> = _receiveOrderState

    private val _updateOrderState = MutableStateFlow<Resource<Unit>?>(null)
    val updateOrderState: StateFlow<Resource<Unit>?> = _updateOrderState

    private val _currentChatOrder = MutableStateFlow<Pair<Long, Long>?>(null)
    val currentChatOrder: StateFlow<Pair<Long, Long>?> = _currentChatOrder

    // Th√™m bi·∫øn m·ªõi ƒë·ªÉ theo d√µi ƒë√£ nh·∫≠n ƒë∆°n ƒë·∫ßu ti√™n ch∆∞a
    private val _isFirstOrderReceived = MutableStateFlow(false)
    val isFirstOrderReceived: StateFlow<Boolean> = _isFirstOrderReceived

    // Th√™m state l∆∞u tr·ªØ ID ƒë∆°n h√†ng ƒë√£ ch·ªçn
    private val _selectedOrderId = MutableStateFlow<Long?>(null)
    val selectedOrderId: StateFlow<Long?> = _selectedOrderId

    init {
        // khi m·ªü app load c·∫£ 2
        loadAvailableOrders()
        loadMyOrders()
    }

    // L∆∞u ID c·ªßa ƒë∆°n h√†ng ƒë∆∞·ª£c ch·ªçn
    fun selectOrder(orderId: Long) {
        _selectedOrderId.value = orderId
    }

    /** ‚úÖ L·∫•y danh s√°ch ƒë∆°n processing (c√≥ th·ªÉ nh·∫≠n) */
    fun loadAvailableOrders() {
        viewModelScope.launch {
            _availableOrders.value = Resource.Loading()
            try {
                Log.d(TAG, "ƒêang t·∫£i danh s√°ch ƒë∆°n c√≥ th·ªÉ nh·∫≠n...")
                val result = getAvailableOrders()
                _availableOrders.value = result
                if (result is Resource.Success) {
                    Log.d(TAG, "T·∫£i danh s√°ch ƒë∆°n c√≥ th·ªÉ nh·∫≠n th√†nh c√¥ng: ${result.data?.orders?.size ?: 0} ƒë∆°n")
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error available orders: ${e.message}")
                _availableOrders.value = Resource.Error("Kh√¥ng th·ªÉ t·∫£i ƒë∆°n kh·∫£ d·ª•ng: ${e.message}")
            }
        }
    }

    /** ‚úÖ L·∫•y danh s√°ch ƒë∆°n shipping (shipper ƒë√£ nh·∫≠n) */
    fun loadMyOrders() {
        viewModelScope.launch {
            _myOrders.value = Resource.Loading()
            try {
                Log.d(TAG, "ƒêang t·∫£i danh s√°ch ƒë∆°n c·ªßa t√¥i...")
                val result = getReceivedOrders()
                _myOrders.value = result
                if (result is Resource.Success) {
                    Log.d(TAG, "T·∫£i danh s√°ch ƒë∆°n c·ªßa t√¥i th√†nh c√¥ng: ${result.data?.orders?.size ?: 0} ƒë∆°n")
                    result.data?.orders?.forEach { order ->
                        Log.d(TAG, "ƒê∆°n #${order.id}: ${order.order_status}")
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error my orders: ${e.message}")
                _myOrders.value = Resource.Error("Kh√¥ng th·ªÉ t·∫£i ƒë∆°n shipper: ${e.message}")
            }
        }
    }

    /** Ph∆∞∆°ng th·ª©c m·ªõi - T√¨m ƒë∆°n h√†ng t·ª´ danh s√°ch c√≥ s·∫µn */
    fun loadOrderFromAvailableList(orderId: Long) {
        viewModelScope.launch {
            _orderDetail.value = Resource.Loading()

            try {
                // ƒê·∫ßu ti√™n, ƒë·∫£m b·∫£o danh s√°ch ƒë√£ ƒë∆∞·ª£c t·∫£i
                if (_availableOrders.value !is Resource.Success) {
                    loadAvailableOrders()
                    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o API ho√†n th√†nh
                    delay(500)
                }

                // Ki·ªÉm tra l·∫°i k·∫øt qu·∫£
                val currentOrders = _availableOrders.value
                if (currentOrders is Resource.Success) {
                    // T√¨m ƒë∆°n h√†ng v·ªõi ID t∆∞∆°ng ·ª©ng
                    val order = currentOrders.data?.orders?.find { it.id == orderId }

                    if (order != null) {
                        Log.d(TAG, "ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng #${orderId} trong danh s√°ch c√≥ s·∫µn")

                        // T·∫°o OrderDto gi·∫£ t·ª´ OrderSummaryDto
                        val orderDto = OrderDto(
                            id = order.id,
                            user_id = 0,
                            user_name = null,    // üëà m·ªõi th√™m
                            phone = null,        // üëà m·ªõi th√™m
                            order_status = order.order_status,
                            payment_status = "unpaid",
                            latitude = 10.762622,
                            longitude = 106.660172,
                            total_amount = order.total_amount,
                            thumbnail_id = null,
                            created_at = null
                        )

                        // T·∫°o OrderDetailDto
                        val detailDto = OrderDetailDto(
                            order = orderDto,
                            items = emptyList() // kh√¥ng c√≥ th√¥ng tin chi ti·∫øt
                        )

                        _orderDetail.value = Resource.Success(detailDto)
                    } else {
                        Log.d(TAG, "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #${orderId} trong danh s√°ch, g·ªçi API chi ti·∫øt")
                        // N·∫øu kh√¥ng t√¨m th·∫•y trong danh s√°ch, th·ª≠ g·ªçi API chi ti·∫øt
                        loadOrderDetail(orderId)
                    }
                } else {
                    Log.d(TAG, "Danh s√°ch ƒë∆°n kh√¥ng c√≥ s·∫µn, g·ªçi API chi ti·∫øt")
                    // Danh s√°ch kh√¥ng c√≥ s·∫µn, th·ª≠ g·ªçi API chi ti·∫øt
                    loadOrderDetail(orderId)
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error finding order: ${e.message}")
                _orderDetail.value = Resource.Error("Kh√¥ng th·ªÉ t√¨m ƒë∆°n h√†ng: ${e.message}")
            }
        }
    }

    /** Chi ti·∫øt ƒë∆°n + th√¥ng tin kh√°ch */
    fun loadOrderDetail(orderId: Long) {
        viewModelScope.launch {
            _orderDetail.value = Resource.Loading()
            try {
                Log.d(TAG, "ƒêang t·∫£i chi ti·∫øt ƒë∆°n h√†ng #${orderId}...")
                val detail = getOrderDetail(orderId)
                _orderDetail.value = detail

                if (detail is Resource.Success && detail.data != null) {
                    Log.d(TAG, "T·∫£i chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng")
                    // ‚úÖ b·ªè: val userId = detail.data.order.user_id
                    // ‚úÖ b·ªè: loadCustomerInfo(userId)
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error loading order detail: ${e.message}")
                _orderDetail.value = Resource.Error("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë∆°n: ${e.message}")
            }
        }
    }

    /** Ph∆∞∆°ng th·ª©c m·ªõi - Nh·∫≠n ƒë∆°n v√† ƒë·ª£i c·∫≠p nh·∫≠t ho√†n t·∫•t */
    suspend fun acceptOrderAndWaitForUpdate(orderId: Long, customerId: Long): Boolean {
        _receiveOrderState.value = Resource.Loading()

        try {
            Log.d(TAG, "ƒêang g·ªçi API nh·∫≠n ƒë∆°n: $orderId")
            val result = receiveOrder(orderId)
            Log.d(TAG, "K·∫øt qu·∫£ nh·∫≠n ƒë∆°n: $result")
            _receiveOrderState.value = result

            if (result is Resource.Success) {
                Log.d(TAG, "Nh·∫≠n ƒë∆°n th√†nh c√¥ng, c·∫≠p nh·∫≠t danh s√°ch")
                NotificationHelper.showOrderReceivedNotification(context, orderId)
                _currentChatOrder.value = Pair(orderId, customerId)

                // Ki·ªÉm tra n·∫øu l√† ƒë∆°n ƒë·∫ßu ti√™n
                val isFirst = !_isFirstOrderReceived.value
                if (isFirst) {
                    _isFirstOrderReceived.value = true
                    // Th√™m delay d√†i h∆°n cho ƒë∆°n ƒë·∫ßu ti√™n
                    delay(1200)
                } else {
                    delay(800)
                }

                // T·∫£i l·∫°i danh s√°ch v·ªõi nhi·ªÅu l·∫ßn th·ª≠ n·∫øu l√† ƒë∆°n ƒë·∫ßu ti√™n
                _myOrders.value = Resource.Loading()
                val myOrdersResult = getReceivedOrders()
                _myOrders.value = myOrdersResult

                // Ki·ªÉm tra v√† th·ª≠ l·∫°i n·∫øu l√† ƒë∆°n ƒë·∫ßu ti√™n v√† danh s√°ch tr·ªëng
                if (isFirst && (myOrdersResult is Resource.Success && myOrdersResult.data?.orders?.isEmpty() == true)) {
                    delay(1000)
                    // Th·ª≠ l·∫°i l·∫ßn n·ªØa
                    val retryResult = getReceivedOrders()
                    _myOrders.value = retryResult
                }

                // T·∫£i l·∫°i danh s√°ch ƒë∆°n c√≥ th·ªÉ nh·∫≠n
                loadAvailableOrders()

                return true
            }
            return false
        } catch (e: Exception) {
            Log.e(TAG, "Error accept: ${e.message}")
            _receiveOrderState.value = Resource.Error("Nh·∫≠n ƒë∆°n th·∫•t b·∫°i: ${e.message}")
            return false
        }
    }

    /** Nh·∫≠n ƒë∆°n - ph∆∞∆°ng th·ª©c c≈©, gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch */
    fun acceptOrder(orderId: Long, customerId: Long) {
        viewModelScope.launch {
            _receiveOrderState.value = Resource.Loading()
            try {
                Log.d(TAG, "ƒêang g·ªçi API nh·∫≠n ƒë∆°n: $orderId")
                val result = receiveOrder(orderId)
                Log.d(TAG, "K·∫øt qu·∫£ nh·∫≠n ƒë∆°n: $result")
                _receiveOrderState.value = result
                if (result is Resource.Success) {
                    Log.d(TAG, "Nh·∫≠n ƒë∆°n th√†nh c√¥ng, c·∫≠p nh·∫≠t danh s√°ch")
                    NotificationHelper.showOrderReceivedNotification(context, orderId)
                    _currentChatOrder.value = Pair(orderId, customerId)
                    loadAvailableOrders()
                    loadMyOrders()
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error accept: ${e.message}")
                _receiveOrderState.value = Resource.Error("Nh·∫≠n ƒë∆°n th·∫•t b·∫°i: ${e.message}")
            }
        }
    }

    /** ƒê√°nh d·∫•u delivered */
    fun markDelivered(orderId: Long) {
        viewModelScope.launch {
            _updateOrderState.value = Resource.Loading()
            try {
                val result = updateOrder(orderId, "paid", "delivered")
                _updateOrderState.value = result
                if (result is Resource.Success) {
                    NotificationHelper.showOrderDeliveredNotification(context, orderId)
                    loadMyOrders()
                    _currentChatOrder.value = null
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error delivered: ${e.message}")
                _updateOrderState.value = Resource.Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${e.message}")
            }
        }
    }

    fun resetReceiveOrderState() { _receiveOrderState.value = null }
    fun resetUpdateOrderState() { _updateOrderState.value = null }
}